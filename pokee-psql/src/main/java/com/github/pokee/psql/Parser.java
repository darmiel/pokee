package com.github.pokee.psql;

import com.github.pokee.psql.domain.token.Token;
import com.github.pokee.psql.domain.token.support.TokenType;
import com.github.pokee.psql.domain.tree.nodes.common.NamespacedFieldNode;
import com.github.pokee.psql.domain.tree.nodes.common.TerminalNode;
import com.github.pokee.psql.domain.tree.nodes.expression.BinaryExpressionNode;
import com.github.pokee.psql.domain.tree.nodes.expression.ExpressionNode;
import com.github.pokee.psql.domain.tree.nodes.expression.FunctionCallExpressionNode;
import com.github.pokee.psql.domain.tree.nodes.expression.NotExpressionNode;
import com.github.pokee.psql.domain.tree.nodes.grammar.impl.*;
import com.github.pokee.psql.exception.ParseException;

import java.util.ArrayList;
import java.util.List;

/**
 * The Parser class is responsible for parsing the tokens generated by the lexer and constructing a syntax tree.
 * The syntax tree is used to represent the structure of the query and is used by the interpreter to execute the query.
 */
public class Parser {

    public static final String TRACE_PREFIX = "> ";

    private final Lexer lexer;

    /**
     * Constructor for the Parser class that initializes it with a specified Lexer.
     * This Lexer is used throughout the parsing process to tokenize the input query string.
     *
     * @param lexer The Lexer instance used for tokenizing the input.
     */
    public Parser(final Lexer lexer) {
        this.lexer = lexer;
    }


    /**
     * Returns the current token from the lexer without advancing the position.
     *
     * @return The current token.
     */
    private Token current() {
        return this.lexer.getCurrentToken();
    }

    /**
     * Advances the lexer to the next token.
     *
     * @return The current instance of the Parser for method chaining.
     */
    private Parser advance() {
        this.lexer.nextToken();
        return this;
    }

    /**
     * Advances the lexer if the current token is null, ensuring that parsing does not fail
     * due to a null token.
     *
     * @return The current instance of the Parser for method chaining.
     */
    private Parser advanceIfNull() {
        if (this.current() == null) {
            this.advance();
        }
        return this;
    }

    /// Basic Parsing Building Blocks

    /**
     * Ensures the current token matches the expected type and advances the lexer if it does.
     * Throws an error if the token does not match.
     *
     * @param type   The expected token type.
     * @param reason A custom error message to display if the token does not match.
     * @return The current instance of the Parser for method chaining.
     */
    private Parser expect(final TokenType type, final String reason) throws ParseException {
        if (this.advanceIfNull().current().type() != type) {
            throw ParseException.because(this.lexer, reason, type);
        }
        return this;
    }

    /**
     * Verifies that a statement is correctly terminated by a semicolon or detects EOF.
     *
     * @return The Parser instance for chaining.
     * @throws ParseException if termination is incorrect.
     */
    private Parser expectEndOfStatement() throws ParseException {
        if (this.current().type() != TokenType.SEMICOLON && this.current().type() != TokenType.EOF) {
            throw ParseException.because(this.lexer, "Expected a semicolon to end the statement.");
        }
        return this;
    }

    /**
     * Creates a TerminalNode from the current token. A TerminalNode is presumably a part of the parser's
     * syntax tree, representing leaf nodes with actual token values.
     *
     * @return A new TerminalNode initialized with the current token.
     */
    private TerminalNode createTerminalNodeFromCurrentToken() {
        final TerminalNode terminalNode = new TerminalNode();
        terminalNode.setSymbol(this.lexer.getCurrentToken());
        return terminalNode;
    }

    /// High-Level Parsing Functions

    /**
     * Constructs a ProgramContext containing all parsed statements until EOF is reached.
     *
     * @return ProgramContext representing the entire program.
     * @throws ParseException if there is an error in parsing.
     */
    public ProgramContext parseProgram() throws ParseException {
        this.advanceIfNull();

        final List<StatementContext> statements = new ArrayList<>();
        while (this.current().type() != TokenType.EOF) { // parse until the end of the query
            statements.add(this.parseStatement());
        }

        return new ProgramContext(statements);
    }

    /**
     * Delegates to the specific parsing method based on the token type (USE, QUERY, LANGUAGE) and returns the result.
     * Example: For 'USE Pokémon AS P;', this returns a StatementContext for a 'use' statement.
     *
     * @return StatementContext encapsulating the result.
     * @throws ParseException if the token does not start a valid statement.
     */
    public StatementContext parseStatement() throws ParseException {
        switch (this.lexer.getCurrentToken().type()) {
            case USE -> {
                final UseStatementContext useStatementContext = this.parseUseAliasContext();
                return new StatementContext(useStatementContext, null, null);
            }
            case QUERY -> {
                final QueryContext queryContext = this.parseQueryContext();
                return new StatementContext(null, queryContext, null);
            }
            case LANGUAGE -> {
                final LanguageContext languageContext = this.parseLanguage();
                return new StatementContext(null, null, languageContext);
            }
            default ->
                    throw ParseException.because(this.lexer, "A statement should either be `use`, `query`, or `language`.",
                            TokenType.USE, TokenType.QUERY, TokenType.LANGUAGE);
        }
    }

    /**
     * Handles parsing of 'use' statements, supporting both namespace use and aliasing.
     * Example: 'USE Pokémon AS P;' results in a UseStatementContext with 'Pokémon' as namespace and 'P' as alias.
     *
     * @return UseStatementContext with namespace and optionally an alias.
     * @throws ParseException if syntax is incorrect.
     */
    public UseStatementContext parseUseAliasContext() throws ParseException {
        this.expect(TokenType.USE, "A use-statement should start with `use`.").advance()
                .expect(TokenType.IDENTIFIER, "You must specify a namespace to use.");
        final TerminalNode original = this.createTerminalNodeFromCurrentToken();

        switch (this.advance().current().type()) {
            case SEMICOLON -> {
                // if a semicolon is found, it means no alias is specified, the namespace is just imported.
                this.advance(); // move past the semicolon
                return new UseStatementContext(original, null);
            }
            case AS -> {
                // if an `as` is found, it means an alias is specified for the namespace.
                this.advance().expect(TokenType.IDENTIFIER, "You must specify an alias after `as`.");
                final TerminalNode alias = this.createTerminalNodeFromCurrentToken();
                this.advance().expectEndOfStatement().advance();
                return new UseStatementContext(original, alias);
            }
            default ->
                    throw ParseException.because(this.lexer, "A use-statement should either end with a semicolon or specify an alias.",
                            TokenType.SEMICOLON, TokenType.AS);
        }
    }

    /**
     * Parses a complete query context from the current position, handling the query's name,
     * projection list, and any filter expressions. Returns a QueryContext representing the entire query.
     *
     * @return A QueryContext representing the parsed query including its name, projections, and filters.
     * @throws ParseException If there is a syntax error in parsing the query.
     */
    public QueryContext parseQueryContext() throws ParseException {
        this.expect(TokenType.QUERY, "Expected `query` to start a query statement.")
                .advance();

        // read the query name
        this.expect(TokenType.IDENTIFIER, """
                Expected a query name after `query`.
                This name will be used to identify the result of the query in the output.""");
        final TerminalNode queryName = this.createTerminalNodeFromCurrentToken();
        this.advance();

        final List<ProjectionNode> projectionNodeList = this.parseProjectionNodes();
        System.out.println(projectionNodeList);

        // make sure if there is an `all` projection node, it is the only one
        if (projectionNodeList.stream().anyMatch(ProjectionNode::isAll) && projectionNodeList.size() > 1) {
            throw ParseException.because(this.lexer, "You can only use `*` once in a query.");
        }

        final List<ExpressionNode> filterExpressions = new ArrayList<>();
        while (this.current().type() == TokenType.FILTER) {
            this.advance(); // go past the filter keyword

            final ExpressionNode filterExpression = this.parseExpressionNode();
            filterExpressions.add(filterExpression);
        }

        this.expectEndOfStatement()
                .advance();

        return new QueryContext(queryName, projectionNodeList, filterExpressions);
    }

    /**
     * Parses a language statement and returns a LanguageContext instance.
     * A language statement is used to specify the language in which the query is written.
     * <p>
     * At the end of the statement (or EOF), a semicolon is expected to terminate the statement and the lexer moves past
     * the semicolon.
     *
     * <pre>
     *     lang de;
     *     │^^^ │^└▶End of Statement
     *     │    │
     *     │    └▶Language
     *     │
     *     └▶Language Keyword
     * </pre>
     *
     * @return A LanguageContext instance representing the parsed language statement.
     * @throws ParseException if the syntax of the language statement is incorrect.
     */
    public LanguageContext parseLanguage() throws ParseException {
        this.expect(TokenType.LANGUAGE, "Expected `language` to start a language statement.").advance()
                .expect(TokenType.IDENTIFIER, "Expected a language name after `language`.");

        final TerminalNode language = this.createTerminalNodeFromCurrentToken();
        this.advance().expectEndOfStatement().advance();

        return new LanguageContext(language);

    }

    /// Detailed Parsing Routines for Query Components

    /**
     * Parses projection nodes from a given query structure.
     * This method supports different formats of projections including:
     * - Wildcard projections (e.g., `P::*`)
     * - Listed fields with optional aliases in braces (e.g., `P::{name, hp}`)
     * - Multiple individual fields with optional aliases (e.g., `P::name, P::hp`)
     *
     * @return A list of ProjectionNode, each representing a parsed field or wildcard from the query.
     * @throws ParseException if the syntax of the projections is incorrect.
     */
    private List<ProjectionNode> parseProjectionNodes() throws ParseException {
        final List<ProjectionNode> projectionNodeList = new ArrayList<>();
        while (true) {
            this.expect(TokenType.NAMESPACE_NAME, """
                    Expected a selection namespace name after query identifier.
                    Use an identifier you have previously used in a `use` statement.
                    For example, `P::{name, hp}` selects the `name` and `hp` fields from the `Pokemon` namespace.""");
            final TerminalNode namespace = this.createTerminalNodeFromCurrentToken();
            this.advance();

            this.parseProjectionType(projectionNodeList, namespace);

            if (this.current().type() == TokenType.COMMA) {
                this.advance();
            } else {
                break;
            }
        }
        return projectionNodeList;
    }

    /**
     * Parses a projection node from the current token and returns a ProjectionNode instance.
     * A projection node is used to select fields from a namespace and optionally alias them.
     * <p>
     * A projection node can be a wildcard projection (e.g., `Pokémon::*`) or a field projection.
     * <p>
     * A single field projection can be aliased (e.g., `Pokémon::{name as n}`) or not aliased (e.g., `Pokémon::name`).
     * <pre>
     *     Pokémon::name as n
     *     │^^^^^^   │^^^    │
     *     │         │       └▶ Alias
     *     │         └────▶ Field
     *     └─▶ Namespace
     * </pre>
     * <p>
     * A wildcard is represented by a star after the namespace and cannot be aliased.
     * <pre>
     *     Pokémon::*
     *     │^^^^^^  │
     *     │        └▶ Wildcard
     *     └─▶ Namespace
     * </pre>
     *
     * @param namespace The current namespace terminal node.
     * @return A ProjectionNode instance representing the parsed projection.
     * @throws ParseException if the syntax of the projection is incorrect.
     */
    private ProjectionNode parseProjectionNode(final TerminalNode namespace) throws ParseException {
        // for wildcard projections, the field is `null` and the alias is `null`.
        // the projection can be either `Pokémon::{*}` or `Pokémon::*`.
        if (this.current().type() == TokenType.STAR) {
            this.advance(); // skip the star, we don't need it anymore

            // make sure the user doesn't try to alias a wildcard projection
            // because how the fck should this work? I am not allowed to swear because Copilot decides to turn off.
            if (this.current().type() == TokenType.AS) {
                throw ParseException.because(this.lexer, """
                        You cannot alias a wildcard projection.
                        You can select all fields using `Pokemon::*` or specify multiple fields using `Pokemon::{field1, field2 as f2}`.""");
            }

            // This field doesn't select a specific field, so we can set field to `null`.
            // The NamespacedFieldNode supports null fields for wildcard projections.
            final NamespacedFieldNode field = new NamespacedFieldNode(namespace, null);
            return new ProjectionNode(field, null);
        }

        // a field projection can be either `Pokémon::{name}` or `Pokémon::name`.
        if (this.current().type() == TokenType.IDENTIFIER) {
            final TerminalNode fieldName = this.createTerminalNodeFromCurrentToken();
            this.advance(); // move past the field name

            TerminalNode alias = null;

            // since this is a field projection, the user can specify an alias.
            if (this.current().type() == TokenType.AS) {
                this.advance().expect(TokenType.IDENTIFIER, "Expected an alias after `as`.");
                alias = this.createTerminalNodeFromCurrentToken();
                this.advance(); // move past the alias
            }

            final NamespacedFieldNode field = new NamespacedFieldNode(namespace, fieldName);
            return new ProjectionNode(field, alias);
        }

        throw ParseException.because(this.lexer, """
                        Expected either a field name or `*` after the namespace name.
                        You can select all fields using `Pokemon::*` or specify multiple fields using `Pokemon::{field1, field2 as f2}`.""",
                TokenType.IDENTIFIER, TokenType.STAR);
    }

    /**
     * Parses the type of projection based on the current token and updates the list of projections.
     *
     * @param projectionNodeList The list to which new projection nodes are added.
     * @param namespace          The current namespace terminal node.
     * @throws ParseException if unexpected tokens are found.
     */
    private void parseProjectionType(final List<ProjectionNode> projectionNodeList,
                                     final TerminalNode namespace) throws ParseException {
        switch (this.current().type()) {
            case LBRACE -> {
                // A brace projection is a shorthand for selecting multiple fields from a namespace.
                // e.g.: `Pokémon::{name, hp as health}`
                this.advance(); // skip the LBRACE

                this.parseProjectionNodesInBraces(projectionNodeList, namespace);
            }
            case STAR, IDENTIFIER -> {
                // A wildcard projection is used to select all fields in a namespace.
                // e.g.: `Pokémon::*`
                // A single field projection is used to select a single field from a namespace.
                // e.g.: `Pokémon::name`
                final ProjectionNode node = this.parseProjectionNode(namespace);
                projectionNodeList.add(node);
            }
            default -> throw ParseException.because(this.lexer, """
                            Expected either `*`, `{`, or an identifier after the namespace name.
                            You can select all fields using `Pokemon::*` or specify multiple fields using `Pokemon::{field1, field2 as f2}`.""",
                    TokenType.STAR, TokenType.LBRACE, TokenType.IDENTIFIER);
        }
    }

    /**
     * Parses field definitions enclosed in braces.
     *
     * @param projectionNodeList The list to which new projection nodes are added.
     * @param namespace          The current namespace terminal node.
     * @throws ParseException if unexpected tokens are found.
     */
    private void parseProjectionNodesInBraces(final List<ProjectionNode> projectionNodeList,
                                              final TerminalNode namespace) throws ParseException {
        while (this.current().type() != TokenType.RBRACE) {
            final ProjectionNode node = this.parseProjectionNode(namespace);
            projectionNodeList.add(node);

            if (this.current().type() == TokenType.COMMA) {
                this.advance();
            } else if (this.current().type() != TokenType.RBRACE) {
                throw ParseException.because(this.lexer, "Expected either `,` or `}` after a field selection.",
                        TokenType.COMMA, TokenType.RBRACE);
            }
        }
        this.advance(); // Move past the RBRACE
    }

    /// Expression Parsing Functions

    /**
     * Constructs an expression tree starting with logical OR conditions.
     * Example: 'a OR b AND c' results in an ExpressionNode encapsulating this logic.
     *
     * @return ExpressionNode for the parsed expression.
     * @throws ParseException if syntax errors are found.
     */
    public ExpressionNode parseExpressionNode() throws ParseException {
        return this.parseLogicalOrExpression();
    }

    /**
     * Handles literals, namespace expressions, or function calls as primary expressions.
     * Example: '("a" + b) * 5', 'Pokémon.name', 'Pokémon.name.startsWith("Pika")'.
     *
     * @return ExpressionNode representing the primary expression.
     * @throws ParseException if syntax is incorrect.
     */
    public ExpressionNode parsePrimaryExpression() throws ParseException {
        switch (this.current().type()) {
            case LPAREN -> {
                this.advance();

                final ExpressionNode expression = this.parseExpressionNode();
                this.expect(TokenType.RPAREN, "Expected a closing parenthesis after the expression.");
                this.advance(); // move past the closing parenthesis

                return expression;
            }
            case NAMESPACE_NAME -> {
                return this.parseFunctionExpression();
            }
            case NOT -> {
                return this.parseNotOrPrimaryExpression();
            }
        }
        throw ParseException.because(this.lexer, """
                Expected a namespace name, or an opening parenthesis to start an expression.
                You can use literals like strings, numbers, and booleans, call functions, or compare fields using `P::name == "Pikachu`.""");
    }

    /**
     * Handles parsing of functions or identifiers within expressions, dealing with namespace and field-specific function calls.
     * Example: 'Pokémon.hp > 50' where 'Pokémon.hp' is parsed as a field identifier expression, or 'Math.max(a, b)' as a function call.
     *
     * @return ExpressionNode either a function call or an identifier.
     * @throws ParseException if unexpected tokens or syntax errors occur.
     */
    private ExpressionNode parseFunctionExpression() throws ParseException {
        // expect and parse the field with the namespace name
        final NamespacedFieldNode fieldNode = this.parseNamespacedField();

        // a dot indicates a function call
        if (this.current().type() == TokenType.DOT) {
            this.advance() // go to the function name
                    .expect(TokenType.FUNCTION_NAME, "Expected a function name after the dot.");

            final TerminalNode functionName = this.createTerminalNodeFromCurrentToken();
            this.advance();

            this.expect(TokenType.LPAREN, "Expected an opening parenthesis after the function name.").advance();
            final List<TerminalNode> arguments = this.parseFunctionArguments();
            this.expect(TokenType.RPAREN, "Expected a closing parenthesis after the function arguments.").advance();

            return new FunctionCallExpressionNode(fieldNode, functionName.getText(), arguments);
        }

        throw ParseException.because(this.lexer, """
                Expected either a function call. You can call a function using 
                `P::name.startsWith("Pika")` or compare fields using `P::name == "Pikachu`.""");
    }

    /**
     * Constructs an ExpressionNode tree, starting with logical OR conditions, handling the complexity of nested expressions.
     * Example: 'a OR b' results in a BinaryExpressionNode representing the OR condition between 'a' and 'b'.
     *
     * @return ExpressionNode representing the parsed logical OR expression.
     * @throws ParseException if syntax errors are found.
     */
    private ExpressionNode parseLogicalOrExpression() throws ParseException {
        ExpressionNode lhs = this.parseLogicalAndExpression();
        while (this.current().type() == TokenType.OR) {
            this.advance(); // move past the operator

            final ExpressionNode rhs = this.parseLogicalAndExpression();
            lhs = new BinaryExpressionNode(lhs, rhs, TokenType.OR);
        }
        return lhs;
    }

    /**
     * Parses logical AND expressions, forming part of the higher-level expression parsing that handles AND operations.
     * Example: 'a AND b' results in a BinaryExpressionNode linking 'a' and 'b' with AND.
     *
     * @return ExpressionNode representing the parsed logical AND expression.
     * @throws ParseException if syntax errors are found.
     */
    private ExpressionNode parseLogicalAndExpression() throws ParseException {
        ExpressionNode lhs = this.parsePrimaryExpression();
        while (this.current().type() == TokenType.AND) {
            this.advance(); // move past the operator

            final ExpressionNode rhs = this.parsePrimaryExpression();
            lhs = new BinaryExpressionNode(lhs, rhs, TokenType.AND);
        }
        return lhs;
    }

    private ExpressionNode parseNotOrPrimaryExpression() throws ParseException {
        this.expect(TokenType.NOT, "Expected a `not` keyword to start a negation expression.");
        this.advance();

        final ExpressionNode expression = this.parsePrimaryExpression();
        return new NotExpressionNode(expression);
    }

    /// Specific Utility Functions for Expressions

    /**
     * Parses arguments for a function call and returns a list of terminal nodes representing the arguments.
     * The arguments can be any literal value (e.g., string, number, boolean) and are separated by commas.
     * A function call can have multiple arguments separated by commas.
     *
     * <pre>
     *     P::name.startsWith() // valid
     *     P::name.startsWith("Pika", "chu") // valid
     *     P::name.startsWith("Pika" "chu") // invalid
     * </pre>
     *
     * @return A list of terminal nodes representing the function arguments.
     * @throws ParseException if the syntax of the function arguments is incorrect.
     */
    private List<TerminalNode> parseFunctionArguments() throws ParseException {
        final List<TerminalNode> args = new ArrayList<>();

        // if there's already a closing parenthesis, we can early return! :)
        // e.g. `P::name.startsWith()`
        if (this.current().type() == TokenType.RPAREN) {
            return args;
        }

        do {
            // currently, we only support literal values as arguments.
            // because expressions would be a _bit_ overkill for now, we already exceeded the scope of the project.
            if (!this.current().type().isLiteral()) {
                throw ParseException.because(this.lexer, """
                                Expected a literal value as a function argument.
                                You can use strings, numbers, and booleans as function arguments.""",
                        TokenType.STRING_LITERAL, TokenType.NUMBER);
            }

            // e.g. `P::name.startsWith("Pika")`
            //                          ^^^^^^
            args.add(this.createTerminalNodeFromCurrentToken());
            this.advance();  // move past the literal

            // if the next token is a comma, skip it and check for another argument.
            // e.g. `P::name.startsWith("Pika", "chu")`
            //                                ^
            if (this.current().type() == TokenType.COMMA) {
                this.advance();  // Move past the comma.
            } else if (this.current().type() != TokenType.RPAREN) {
                // if the next token is not a closing parenthesis, it's an invalid token.
                throw ParseException.because(this.lexer, "Expected a comma or a closing parenthesis in function arguments.",
                        TokenType.COMMA, TokenType.RPAREN);
            }
        } while (this.current().type() != TokenType.RPAREN); // continue until reaching the closing parenthesis.

        return args;
    }

    /**
     * Parses a namespaced field expression. A namespaced field expression is a combination of a namespace and a field
     * name, optionally followed by a wildcard `*` to select all fields in the namespace.
     * <p>
     * The end result is a NamespacedFieldNode instance representing the parsed expression and the lexer moves past the
     * field name.
     *
     * <pre>
     *                  ┌ Field ─┐
     *                ┌▶│name    │
     * ┌ Namespace ─┐ │ └────────┘
     * │Pokemon::   │─┤
     * └────────────┘ │ ┌ Wildcard ─┐
     *         one of └▶│*          │
     *                  └───────────┘
     * </pre>
     *
     * @return A NamespacedFieldNode instance representing the parsed namespaced field expression.
     * @throws ParseException if the syntax of the namespaced field expression is incorrect.
     */
    public NamespacedFieldNode parseNamespacedField() throws ParseException {
        this.expect(TokenType.NAMESPACE_NAME, """
                Expected a namespace name to start an expression. Use an identifier you have previously used in a `use` statement.
                Example: P::name, where `P` is a namespace you have previously imported and `name` is a field in that namespace.""");
        final TerminalNode namespace = this.createTerminalNodeFromCurrentToken();
        this.advance();

        if (this.current().type() == TokenType.IDENTIFIER) {
            // Pokemon::name
            // ^^^^^^^  ^^^^
            // │        └▶Field Name
            // └─▶Namespace
            final TerminalNode target = this.createTerminalNodeFromCurrentToken();
            this.advance();
            return new NamespacedFieldNode(namespace, target);
        }

        if (this.current().type() == TokenType.STAR) {
            // Pokemon::*
            // ^^^^^^^  ^
            // │        └▶Wildcard
            // └─▶Namespace
            this.advance();
            return new NamespacedFieldNode(namespace, null);
        }

        throw ParseException.because(this.lexer, """
                        Expected either a target field or `*` after the namespace name.
                        You can select all fields using `Pokemon::*` or specify a single field using `Pokemon::name`.""",
                TokenType.IDENTIFIER, TokenType.STAR);
    }

}
